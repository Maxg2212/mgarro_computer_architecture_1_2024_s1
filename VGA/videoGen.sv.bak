module videoGen(input logic [9:0] x, y, input logic [3:0] x_select, y_select,
				input logic [3:0] matrix [0:7][0:7], 
				input logic matrix_bombas [0:7][0:7], 
				input logic matrix_visible [0:7][0:7],
				input logic matrix_flags [0:7][0:7],
				input logic win, lose, 
				output logic [7:0] r, g, b);

    logic inrectBG1, inrectBG2;
	logic inSquare, inBomb;
	logic numero;
	logic select;
	logic bomba, flag;
	logic ganado, ganado_aux, perdido, perdido_aux;

	
	 logic matrix_casillas [0:7][0:7];

	// Rectangulo lateral izquierdo y derecho
	rectgen rectBG1(x, y, 10'd0, 10'd80, 10'd0, 10'd480, inrectBG1);
	rectgen rectBG2(x, y, 10'd560, 10'd640, 10'd0, 10'd480, inrectBG2);

	// Crea los cuadrados grices oscuros de 60 x 60
	//assign inSquare = ((x-80) % 61 < 60) && (y % 61 < 60) && (x > 80) && (x < 560); 
	
	// Crea los cuadrados grices oscuros de 7 x 7
	assign inSquare = ((x-80) % 8 < 7) && ((y-80) % 8 < 7) && (x > 80) && (x < 560) && (y > 80) && (y < 560);

	
	genvar i;
	genvar j;
	generate
        for (i = 0; i <= 7; i++) begin : gen_set_icons_x
			for (j = 0; j <= 7; j++) begin : gen_set_icons_y

				logic [3:0] value_to_show;
				assign value_to_show = (matrix_flags[i][j]==1) ? 4'b1011 : (matrix_bombas[i][j]==1) ? 4'b1010 : matrix[i][j];

				set_icon set_icon_inst(value_to_show, x,y, i, j, matrix_visible[i][j], matrix_casillas[i][j]);

				//set_icon set_icon_inst(matrix[i][j], x,y, i, j, matrix_visible[i][j], matrix_casillas[i][j]);

			end
        end
    endgenerate
	
	logic [2:0] x_matrix_aux, y_matrix_aux;

	// Configura ganado_aux y perdido_aux para que tomen los valores de win y lose
	always_comb begin
		ganado_aux = win;
		perdido_aux = lose;
	end
	
	set_icon icon_select ( 9, x, y, x_select, y_select, 1'b1, select);
	set_icon icon_ganado (12, x, y, x_select, y_select, ganado_aux, ganado);
	set_icon icon_perdido(13, x, y, x_select, y_select, perdido_aux, perdido);
	
	detector_pos_matrix detector_pos_matrix_inst(x, y, x_matrix_aux, y_matrix_aux);

	//assign numero = (casillas) ? 1 : 0;
	assign numero = (matrix_casillas) ? 1 : 0;
	assign bomba = (numero && (matrix_bombas[x_matrix_aux][y_matrix_aux])) ? 1 : 0;
	assign flag = (numero && (matrix_flags[x_matrix_aux][y_matrix_aux])) ? 1 : 0;
	
	// Determinar colores
	// Orden de prioridad: 1. Win 2. Numero 3. Select 4. Rectangulo 5. Cuadrado 6. Bomba
	assign r = (ganado ? 8'h00 : perdido ? 8'hAA : flag ? 8'h32 : bomba ? 8'h32 : numero ? 8'hC8: select ? 8'h32 : (inrectBG1 | inrectBG2) ? 8'hD9 : inSquare ? 8'h53 :8'h00);
	assign g = (ganado ? 8'hAA : perdido ? 8'h00 : flag ? 8'hC8 : bomba ? 8'h32 : numero ? 8'h32: select ? 8'h32 : (inrectBG1 | inrectBG2) ? 8'hD9 : inSquare ? 8'h56 :8'h00);
	assign b = (ganado ? 8'hFF : perdido ? 8'h00 : flag ? 8'h32 : bomba ? 8'hC8 : numero ? 8'h32: select ? 8'hC8 : (inrectBG1 | inrectBG2) ? 8'hD6 : inSquare ? 8'h5B :8'h00);

	// Bombas y flags -> H3232C8
	
endmodule